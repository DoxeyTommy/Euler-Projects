package euler;

import java.math.BigInteger;

public class main {

	public static void main(String[] args) {
		
		BigInteger result = BigInteger.ZERO;
        result = pow(BigInteger.valueOf(2), BigInteger.valueOf(1000));
        String resultString = new String(result.toString());
         
        int Answer = 0;
        for (int i = 0; i < resultString.length(); i++)
        {
            Character c = new Character(resultString.charAt(i));
            String str = c.toString();
            int n = Integer.parseInt(str);
            Answer = Answer + n;
        }
 
        System.out.println(Answer);
 
    }
     
    public static BigInteger pow(BigInteger base, BigInteger exponent)
    {
        BigInteger result = BigInteger.ONE;
        while(exponent.signum() > 0)
        {
            if(exponent.testBit(0)) 
            	result = result.multiply(base);
            
            base = base.multiply(base);
            exponent = exponent.shiftRight(1);
        }
        
        return result;
    }
	
	//solution: 1366
}

