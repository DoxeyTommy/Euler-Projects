package euler;

import java.util.Arrays;

public class main {
	
	private static final int LIMIT = 7;
	
	public static void main(String[] args) {
		
		for (int max = 0; ; max++)
		{
			SpecialSet set = SpecialSet.makeSet(LIMIT, max);
			if (set != null) 
			{
				String str = "";
				for (int i : set.values)
					str += i;
				System.out.println(str);
				break;
			}
		}
	}
	
	private static final class SpecialSet {
		
		public static SpecialSet makeSet(int size, int max) {
			return makeSet(new SpecialSet(), size, max, 1);
		}
		
		private static SpecialSet makeSet(SpecialSet set, int size, int sum, int startVal) {
			
			if (size == 0)
				return set;
			if (size >= 2 && startVal * size >= sum)
				return null;
			int endVal = sum;
			if (set.values.length >= 2)
				endVal = Math.min(set.values[0] + set.values[1] - 1, endVal);
			for (int val = startVal; val <= endVal; val++) 
			{
				SpecialSet temp = set.add(val);
				if (temp == null)
					continue;
				temp = makeSet(temp, size - 1, sum - val, val + 1);
				if (temp != null)
					return temp;
			}
			return null;
		}
		
		public int[] values;
		private boolean[] sumPossible;
		private int[] minimumSum;
		private int[] maximumSum;
		
		public SpecialSet() {
			this(new int[]{}, new boolean[]{true}, new int[]{0}, new int[]{0});
		}
		
		private SpecialSet(int[] vals, boolean[] sumPosb, int[] minSum, int[] maxSum) {
			values = vals;
			sumPossible = sumPosb;
			minimumSum = minSum;
			maximumSum = maxSum;
		}
		
		public SpecialSet add(int val) {
			
			int size = values.length;
			for (int i = val; i < sumPossible.length; i++) 
			{
				if (sumPossible[i] & sumPossible[i - val])
					return null;
			}
			
			int newSize = size + 1;
			int[] newMin = new int[newSize + 1];
			int[] newMax = new int[newSize + 1];
			for (int i = 1; i < newSize; i++) 
			{
				newMin[i] = Math.min(minimumSum[i], minimumSum[i - 1] + val);
				newMax[i] = Math.max(maximumSum[i], maximumSum[i - 1] + val);
			}
			newMin[newSize] = minimumSum[newSize - 1] + val;
			newMax[newSize] = maximumSum[newSize - 1] + val;
			
			for (int i = 0; i < newSize; i++) 
			{
				if (newMax[i] >= newMin[i + 1])
					return null;
			}
			
			boolean[] temp = Arrays.copyOf(sumPossible, sumPossible.length + val);
			for (int i = temp.length - 1; i >= val; i--)
				temp[i] |= temp[i - val];
			
			int[] newVals = Arrays.copyOf(values, newSize);
			newVals[size] = val;
			return new SpecialSet(newVals, temp, newMin, newMax);
		}
	}
		 
	//solution: 20313839404245

}
