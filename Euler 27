package euler;

public class main {

	public static void main(String[] args) {
		
		System.out.println(quadPrimes());
	}
		
	public static String quadPrimes() {
		int maxNum = 0;
		int maxA = 0;
		int maxB = 0;
		for (int a = -1000; a <= 1000; a++) 
		{
			for (int b = -1000; b <= 1000; b++) 
			{
			    int num = numConsecutivePrimes(a, b);
			    if (num > maxNum) 
			    {
			       maxNum = num;
			       maxA = a;
			       maxB = b;
			    }
			}
		}
		
		return Integer.toString(maxA * maxB);
	}
			 
			 
	private static int numConsecutivePrimes(int a, int b) {
		for (int i = 0; ; i++) 
		{
			int n = i * i + i * a + b;
			if (n < 0 || !isPrime(n))
			    return i;
		}
	}
			 
	public static boolean isPrime(int x) {
		
		if (x == 0 || x == 1)
			return false;
	    else if (x == 2)  
	    	return true;
	    else 
	    {     
	    	if (x % 2 == 0)    
	    		return false;
	    	for (int i = 3, end = sqrt(x); i <= end; i += 2) 
	    	{                 
	    		if (x % i == 0)                    
	    			return false;
	        }
	    	return true;          
	    }
	}
	public static int sqrt(int x) {
		
		int y = 0;
		
		for (int i = 32768; i != 0; i >>>= 1) 
		{
           
			y |= i;
			
			if (y > 46340 || y * y > x)                 
				y ^= i;
		}    
		return y;
	}
	
	//solution: -59231
}
