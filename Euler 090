package euler;

public class main {
	
	public static void main(String[] args) {
		
		int count = 0;
		for (int i = 0; i < (1 << 10); i++) 
		{
			for (int j = i; j < (1 << 10); j++) 
			{
				if (Integer.bitCount(i) == 6 && Integer.bitCount(j) == 6 && isSolution(i, j))
					count++;
			}
		}
		System.out.println(Integer.toString(count));
	}
	
	private static boolean isSolution(int x, int y) {
		if (testBit(x, 6) || testBit(x, 9))
			x |= (1 << 6) | (1 << 9);
		if (testBit(y, 6) || testBit(y, 9))
			y |= (1 << 6) | (1 << 9);
		
		for (int[] sqr : SQUARES) 
		{
			if (!(testBit(x, sqr[0]) && testBit(y, sqr[1]) || testBit(x, sqr[1]) && testBit(y, sqr[0])))
				return false;
		}
		return true;
	}
	
	private static int[][] SQUARES = {{0, 1}, {0, 4}, {0, 9}, {1, 6}, {2, 5}, {3, 6}, {4, 9}, {6, 4}, {8, 1}};
	
	private static boolean testBit(int x, int y) {
		return ((x >>> y) & 1) != 0;
	}
		 
	//solution: 1217

}
