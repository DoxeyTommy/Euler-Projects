package euler;

import java.math.BigInteger;
import java.util.Arrays;

public class main {
	
	public static void main(String[] args) {
		
		int i = 0;
		int a = 0;
		int b = 1;
		while (!isFound(i, a)) 
		{
			int c = (a + b) % 1000000000;
			a = b;
			b = c;
			i++;
		}
		System.out.println(Integer.toString(i));
	}
	
	
	private static boolean isFound(int n, int mod) {
		if (!isPandigital(Integer.toString(mod)))
			return false;
		BigInteger fib = fibonacci(n)[0];
		return isPandigital(leading9Digits(fib));
	}
	
	private static String leading9Digits(BigInteger x) {
		int log = (x.bitLength() - 1) * 3 / 10;
		x = x.divide(BigInteger.TEN.pow(Math.max(log + 1 - 9, 0)));
		return x.toString().substring(0, 9);
	}
	
	
	private static boolean isPandigital(String s) {
		if (s.length() != 9)
			return false;
		char[] temp = s.toCharArray();
		Arrays.sort(temp);
		return new String(temp).equals("123456789");
	}
	
	private static BigInteger[] fibonacci(int n) {
		if (n == 0)
			return new BigInteger[]{BigInteger.ZERO, BigInteger.ONE};
		else {
			BigInteger[] ab = fibonacci(n / 2);
			BigInteger a = ab[0];
			BigInteger b = ab[1];
			BigInteger c = a.multiply(b.shiftLeft(1).subtract(a));
			BigInteger d = a.multiply(a).add(b.multiply(b));
			if (n % 2 == 0)
				return new BigInteger[]{c, d};
			else
				return new BigInteger[]{d, c.add(d)};
		}
	}
		 
	//solution: 329468

}
